-- ========================================
-- COHORT ANALYSIS QUERIES
-- E-commerce Revenue Analytics Engine
-- ========================================

USE ecommerce_analytics;

-- ========================================
-- 1. CUSTOMER COHORTS BY SIGNUP MONTH
-- Groups customers by their registration month
-- ========================================

WITH customer_cohorts AS (
    SELECT 
        customer_id,
        DATE_FORMAT(created_at, '%Y-%m') AS cohort_month,
        YEAR(created_at) AS cohort_year,
        MONTH(created_at) AS cohort_month_num,
        created_at
    FROM customers
    WHERE status = 'active'
)
SELECT 
    cohort_month,
    COUNT(DISTINCT customer_id) AS total_customers,
    MIN(created_at) AS cohort_start_date,
    MAX(created_at) AS cohort_end_date
FROM customer_cohorts
GROUP BY cohort_month, cohort_year, cohort_month_num
ORDER BY cohort_year DESC, cohort_month_num DESC;

-- ========================================
-- 2. COHORT RETENTION ANALYSIS
-- Tracks customer retention month-over-month
-- Shows what % of each cohort returned to purchase
-- ========================================

WITH customer_cohorts AS (
    -- Assign each customer to their signup cohort
    SELECT 
        c.customer_id,
        DATE_FORMAT(c.created_at, '%Y-%m-01') AS cohort_date,
        c.created_at AS signup_date
    FROM customers c
    WHERE c.status = 'active'
),
customer_orders AS (
    -- Get all orders with cohort information
    SELECT 
        cc.customer_id,
        cc.cohort_date,
        DATE_FORMAT(o.order_date, '%Y-%m-01') AS order_date,
        TIMESTAMPDIFF(MONTH, cc.cohort_date, DATE_FORMAT(o.order_date, '%Y-%m-01')) AS months_since_signup
    FROM customer_cohorts cc
    JOIN orders o ON cc.customer_id = o.customer_id
    WHERE o.status IN ('delivered', 'shipped', 'processing')
        AND o.payment_status = 'paid'
),
cohort_size AS (
    -- Count customers per cohort
    SELECT 
        cohort_date,
        COUNT(DISTINCT customer_id) AS cohort_customers
    FROM customer_cohorts
    GROUP BY cohort_date
),
retention_data AS (
    -- Calculate active customers per cohort per month
    SELECT 
        co.cohort_date,
        co.months_since_signup,
        COUNT(DISTINCT co.customer_id) AS active_customers
    FROM customer_orders co
    GROUP BY co.cohort_date, co.months_since_signup
)
SELECT 
    rd.cohort_date AS cohort_month,
    cs.cohort_customers AS initial_customers,
    rd.months_since_signup AS month_number,
    rd.active_customers,
    ROUND(100.0 * rd.active_customers / cs.cohort_customers, 2) AS retention_rate_pct
FROM retention_data rd
JOIN cohort_size cs ON rd.cohort_date = cs.cohort_date
WHERE rd.months_since_signup <= 12  -- First 12 months
ORDER BY rd.cohort_date DESC, rd.months_since_signup ASC;

-- ========================================
-- 3. COHORT REVENUE ANALYSIS
-- Tracks revenue generated by each cohort over time
-- ========================================

WITH customer_cohorts AS (
    SELECT 
        c.customer_id,
        DATE_FORMAT(c.created_at, '%Y-%m-01') AS cohort_date
    FROM customers c
    WHERE c.status = 'active'
),
cohort_revenue AS (
    SELECT 
        cc.cohort_date,
        TIMESTAMPDIFF(MONTH, cc.cohort_date, DATE_FORMAT(o.order_date, '%Y-%m-01')) AS months_since_signup,
        COUNT(DISTINCT o.customer_id) AS active_customers,
        COUNT(DISTINCT o.order_id) AS total_orders,
        SUM(o.total_amount) AS total_revenue,
        AVG(o.total_amount) AS avg_order_value
    FROM customer_cohorts cc
    JOIN orders o ON cc.customer_id = o.customer_id
    WHERE o.status IN ('delivered', 'shipped', 'processing')
        AND o.payment_status = 'paid'
    GROUP BY cc.cohort_date, months_since_signup
),
cohort_size AS (
    SELECT 
        cohort_date,
        COUNT(DISTINCT customer_id) AS cohort_customers
    FROM customer_cohorts
    GROUP BY cohort_date
)
SELECT 
    cr.cohort_date AS cohort_month,
    cs.cohort_customers AS initial_customers,
    cr.months_since_signup AS month_number,
    cr.active_customers,
    cr.total_orders,
    ROUND(cr.total_revenue, 2) AS revenue,
    ROUND(cr.avg_order_value, 2) AS avg_order_value,
    ROUND(cr.total_revenue / cs.cohort_customers, 2) AS revenue_per_customer,
    ROUND(100.0 * cr.active_customers / cs.cohort_customers, 2) AS retention_pct
FROM cohort_revenue cr
JOIN cohort_size cs ON cr.cohort_date = cs.cohort_date
WHERE cr.months_since_signup <= 12
ORDER BY cr.cohort_date DESC, cr.months_since_signup ASC;

-- ========================================
-- 4. COHORT LIFETIME VALUE (LTV) ANALYSIS
-- Calculates cumulative revenue per customer
-- ========================================

WITH customer_cohorts AS (
    SELECT 
        c.customer_id,
        DATE_FORMAT(c.created_at, '%Y-%m-01') AS cohort_date
    FROM customers c
    WHERE c.status = 'active'
),
monthly_revenue AS (
    SELECT 
        cc.cohort_date,
        TIMESTAMPDIFF(MONTH, cc.cohort_date, DATE_FORMAT(o.order_date, '%Y-%m-01')) AS months_since_signup,
        SUM(o.total_amount) AS revenue
    FROM customer_cohorts cc
    JOIN orders o ON cc.customer_id = o.customer_id
    WHERE o.status IN ('delivered', 'shipped', 'processing')
        AND o.payment_status = 'paid'
    GROUP BY cc.cohort_date, months_since_signup
),
cohort_size AS (
    SELECT 
        cohort_date,
        COUNT(DISTINCT customer_id) AS cohort_customers
    FROM customer_cohorts
    GROUP BY cohort_date
),
cumulative_revenue AS (
    SELECT 
        mr.cohort_date,
        mr.months_since_signup,
        mr.revenue,
        SUM(mr.revenue) OVER (
            PARTITION BY mr.cohort_date 
            ORDER BY mr.months_since_signup
        ) AS cumulative_revenue
    FROM monthly_revenue mr
)
SELECT 
    cr.cohort_date AS cohort_month,
    cs.cohort_customers AS initial_customers,
    cr.months_since_signup AS month_number,
    ROUND(cr.revenue, 2) AS monthly_revenue,
    ROUND(cr.cumulative_revenue, 2) AS cumulative_revenue,
    ROUND(cr.cumulative_revenue / cs.cohort_customers, 2) AS ltv_per_customer
FROM cumulative_revenue cr
JOIN cohort_size cs ON cr.cohort_date = cs.cohort_date
WHERE cr.months_since_signup <= 12
ORDER BY cr.cohort_date DESC, cr.months_since_signup ASC;

-- ========================================
-- 5. COHORT PURCHASE FREQUENCY ANALYSIS
-- Analyzes how often cohorts make repeat purchases
-- ========================================

WITH customer_cohorts AS (
    SELECT 
        c.customer_id,
        DATE_FORMAT(c.created_at, '%Y-%m-01') AS cohort_date
    FROM customers c
    WHERE c.status = 'active'
),
customer_purchase_count AS (
    SELECT 
        cc.cohort_date,
        cc.customer_id,
        COUNT(DISTINCT o.order_id) AS total_purchases,
        MIN(o.order_date) AS first_purchase_date,
        MAX(o.order_date) AS last_purchase_date,
        DATEDIFF(MAX(o.order_date), MIN(o.order_date)) AS days_active
    FROM customer_cohorts cc
    JOIN orders o ON cc.customer_id = o.customer_id
    WHERE o.status IN ('delivered', 'shipped', 'processing')
        AND o.payment_status = 'paid'
    GROUP BY cc.cohort_date, cc.customer_id
)
SELECT 
    cohort_date AS cohort_month,
    COUNT(DISTINCT customer_id) AS total_customers,
    SUM(CASE WHEN total_purchases = 1 THEN 1 ELSE 0 END) AS one_time_buyers,
    SUM(CASE WHEN total_purchases BETWEEN 2 AND 5 THEN 1 ELSE 0 END) AS repeat_buyers_2_5,
    SUM(CASE WHEN total_purchases BETWEEN 6 AND 10 THEN 1 ELSE 0 END) AS repeat_buyers_6_10,
    SUM(CASE WHEN total_purchases > 10 THEN 1 ELSE 0 END) AS power_buyers,
    ROUND(AVG(total_purchases), 2) AS avg_purchases_per_customer,
    ROUND(AVG(days_active), 0) AS avg_days_active,
    ROUND(100.0 * SUM(CASE WHEN total_purchases > 1 THEN 1 ELSE 0 END) / COUNT(*), 2) AS repeat_purchase_rate_pct
FROM customer_purchase_count
GROUP BY cohort_date
ORDER BY cohort_date DESC;

-- ========================================
-- 6. COHORT COMPARISON SUMMARY
-- High-level metrics comparing cohorts
-- ========================================

WITH customer_cohorts AS (
    SELECT 
        c.customer_id,
        DATE_FORMAT(c.created_at, '%Y-%m-01') AS cohort_date
    FROM customers c
    WHERE c.status = 'active'
),
cohort_metrics AS (
    SELECT 
        cc.cohort_date,
        COUNT(DISTINCT cc.customer_id) AS total_customers,
        COUNT(DISTINCT o.order_id) AS total_orders,
        SUM(o.total_amount) AS total_revenue,
        COUNT(DISTINCT CASE 
            WHEN TIMESTAMPDIFF(MONTH, cc.cohort_date, o.order_date) <= 1 
            THEN o.customer_id 
        END) AS customers_active_month_1,
        COUNT(DISTINCT CASE 
            WHEN TIMESTAMPDIFF(MONTH, cc.cohort_date, o.order_date) = 3 
            THEN o.customer_id 
        END) AS customers_active_month_3,
        COUNT(DISTINCT CASE 
            WHEN TIMESTAMPDIFF(MONTH, cc.cohort_date, o.order_date) = 6 
            THEN o.customer_id 
        END) AS customers_active_month_6
    FROM customer_cohorts cc
    LEFT JOIN orders o ON cc.customer_id = o.customer_id
        AND o.status IN ('delivered', 'shipped', 'processing')
        AND o.payment_status = 'paid'
    GROUP BY cc.cohort_date
)
SELECT 
    cohort_date AS cohort_month,
    total_customers,
    total_orders,
    ROUND(total_revenue, 2) AS total_revenue,
    ROUND(total_revenue / total_customers, 2) AS revenue_per_customer,
    ROUND(total_orders * 1.0 / total_customers, 2) AS orders_per_customer,
    ROUND(100.0 * customers_active_month_1 / total_customers, 2) AS month_1_retention_pct,
    ROUND(100.0 * customers_active_month_3 / total_customers, 2) AS month_3_retention_pct,
    ROUND(100.0 * customers_active_month_6 / total_customers, 2) AS month_6_retention_pct
FROM cohort_metrics
WHERE cohort_date >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH)
ORDER BY cohort_date DESC;

-- ========================================
-- End of Cohort Analysis Queries
-- ========================================